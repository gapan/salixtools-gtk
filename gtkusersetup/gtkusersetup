#!/usr/bin/env python

import gtk
import os
import sys
import commands

import pwd
import grp

class SystemUsers:
	def all_users_data(self):
		userdata = []
		for i in pwd.getpwall():
			login = i[0]
			uid = i[2]
			gid = i[3]
			gecos = i[4]
			homedir = i[5]
			shell = i[6]
			if ',' in gecos:
				fullname = gecos.partition(',')[0]
				officeinfo = gecos.partition(',')[2].partition(',')[0]
				officeext = gecos.partition(',')[2].partition(',')[2].partition(',')[0]
				homephone = gecos.partition(',')[2].partition(',')[2].partition(',')[2].partition(',')[0]
			else:
				fullname = gecos
				officeinfo = ''
				officeext = ''
				homephone = ''
			userdata.append([login, uid, gid, fullname, officeinfo, officeext, homephone, homedir, shell])
		return userdata

	def default_groups(self):
		groups = []
		groups_to_try = ('audio', 'video', 'cdrom', 'floppy', 'lp', 'plugdev', 'scanner', 'power', 'netdev')
		for i in groups_to_try:
			try: 
				groups.append(grp.getgrnam(i)[0])
			except KeyError:
				pass

		return groups
	
	def user_list(self, all = False):
		userlist = []
		for i in self.all_users_data():
			if all == False:
				if i[1] >= 500:
					userlist.append(i)
				elif i[1] == 0:
					userlist.append(i)
			else:
				userlist.append(i)
		return userlist

	def get_uid(self, login):
		uid = pwd.getpwnam(login)[2]
		return uid

	def get_gid(self, login):
		gid = pwd.getpwname(login)[3]
		return gid

	def get_fullname(self, login):
		for i in self.all_users_data():
			if i[0] == login:
				fullname = i[3]
		return fullname

	def get_officeinfo(self, login):
		for i in self.all_users_data():
			if i[0] == login:
				officeinfo = i[4]
		return officeinfo

	def get_officeext(self, login):
		for i in self.all_users_data():
			if i[0] == login:
				officeext = i[5]
		return officeext

	def get_homephone(self, login):
		for i in self.all_users_data():
			if i[0] == login:
				homephone = i[6]
		return homephone

	def get_homedir(self, login):
		homedir = pwd.getpwnam(login)[5]
		return homedir

	def get_shell(self, login):
		shell = pwd.getpwnam(login)[6]
		return shell

	def get_maingroup(self, login):
		group = commands.getoutput('groups '+login).partition(' : ')[2].partition(' ')[0]
		return group

	def get_groups(self, login):
		groups = []
		allgroups = grp.getgrall()
		for i in allgroups:
			if login in i[3]:
				groups.append(i[0])
		return groups

	def create_user(self, login, shell, group, groups, password):
		os.system('useradd -s '+shell+' -g '+group+' -m -k /etc/skel -p'+password+' '+login)
		for i in groups:
			os.system('gpasswd -a '+login+' '+i+' > /dev/null')

	def del_user(self, login, remove_home=False):
		if remove_home == True:
			homedir = self.get_homedir(login)
			os.system('rm -rf '+homedir)
		os.system('userdel '+login)

	def set_uid(self, login, uid):
		os.system('usermod -u '+str(uid)+' '+login)

	def set_group(self, login, group):
		os.system('usermod -g '+group+' '+login)

	def set_fullname(self, login, fullname):
		fullname = '"'+fullname+'"'
		os.system('chfn -f '+fullname+' '+login)

	def set_officeinfo(self, login, officeinfo):
		officeinfo = '"'+officeinfo+'"'
		os.system('chfn -r '+officeinfo+' '+login)

	def set_officeext(self, login, officeext):
		officeinfo = '"'+officeinfo+'"'
		os.system('chfn -w '+officeext+' '+login)
	
	def set_homephone(self, login, homephone):
		officeinfo = '"'+homephone+'"'
		os.system('chfn -w '+homephone+' '+login)

	def set_homedir(self, login, homedir):
		os.system('usermod -d '+homedir+' '+login)

	def set_shell(self, login, shell):
		os.system('usermod -s '+shell+' '+login)

class SystemGroups:
	def groups(self):
		groups = []
		for i in grp.getgrall():
			groupname = i[0]
			gid = i[2]
			members = i[3]
			groups.append([groupname, gid, members])
		return groups


# Internationalization
import locale
import gettext
import gtk.glade
gettext.bindtextdomain("gtkusersetup", "/usr/share/locale")
gettext.textdomain("gtkusersetup")
gettext.install("gtkusersetup", "/usr/share/locale", unicode=1)
gtk.glade.bindtextdomain("gtkusersetup", "/usr/share/locale")
gtk.glade.textdomain("gtkusersetup")

class GTKUserSetup:
	def gtk_main_quit(self, widget, data=None):
		gtk.main_quit()

	def on_button_close_clicked(self, widget, data=None):
		gtk.main_quit()

	def on_button_properties_clicked(self, widget, data=None):
		u = SystemUsers()
		user = self.userlist.get_selection()
		self.userliststore, iter = user.get_selected()
		username = self.userliststore.get_value(iter, 1)
		fullname = u.get_fullname(username)
		officeinfo = u.get_officeinfo(username)
		officeext = u.get_officeext(username)
		homephone = u.get_homephone(username)
		maingroup = u.get_maingroup(username)

		# Set existing values
		#
		# Account tab
		self.entry_login.set_text(username)
		self.entry_login.set_sensitive(False)
		self.entry_fullname.set_text(fullname)
		self.label_passwordheader.set_label('<b>Set new password</b>')
		
		# Contact tab
		self.entry_officeinfo.set_text(officeinfo)
		self.entry_officeext.set_text(officeext)
		self.entry_homephone.set_text(homephone)

		# Groups tab
		self.groupliststore.clear()
		g = SystemGroups()
		allgroups = g.groups()
		count = 0
		for i in allgroups:
			self.groupliststore.append([i[0]])
			if i[0] == maingroup:
				print i[0]
				self.combobox_maingroup.set_active(count)
			count += 1
		self.user_groupliststore.clear()
		for i in allgroups:
			group = i[0]
			gid = i[1]
			groupmembers = i[2]
			if username in groupmembers:
				ismember = True
			else:
				ismember = False
			self.user_groupliststore.append([ismember, group, gid])


		self.user_properties_window.show()

	def on_checkbutton_showall_toggled(self, widget, data=None):
		self.userliststore.clear()
		status = self.checkbutton_showall.get_active()
		u = SystemUsers()
		for i in u.user_list(status):
			self.userliststore.append([i[3], i[0], i[7], i[1]])

	def on_button_user_properties_ok_clicked(self, widget, data=None):
		self.user_properties_window.hide()

	def on_button_user_properties_cancel_clicked(self, widget, data=None):
		self.user_properties_window.hide()

	def __init__(self):
		builder = gtk.Builder()
		if os.path.exists('gtkusersetup.glade'):
			builder.add_from_file('gtkusersetup.glade')
		elif os.path.exists('/usr/share/salixtools/gtkusersetup/gtkusersetup.glade'):
			builder.add_from_file('/usr/share/salixtools/gtkusersetup/gtkusersetup.glade')

		# Main window objects
		#
		self.window = builder.get_object('gtkusersetup')
		self.namecolumn = builder.get_object('namecolumn')
		self.logincolumn = builder.get_object('logincolumn')
		self.homedircolumn = builder.get_object('homedircolumn')
		self.userlist = builder.get_object('userlist')
		self.userliststore = builder.get_object('userliststore')
		self.checkbutton_showall = builder.get_object('checkbutton_showall')

		self.logincolumn.set_title(_('Username'))
		self.namecolumn.set_title(_('Real name'))
		self.homedircolumn.set_title(_('Home directory'))
		
		self.on_checkbutton_showall_toggled(self)
		self.userlist.set_cursor(1)

		# User properties/Add user window objects
		#
		# Account tab
		self.user_properties_window = builder.get_object('user_properties_window')
		self.entry_login = builder.get_object('entry_login')
		self.entry_fullname = builder.get_object('entry_fullname')
		self.label_passwordheader = builder.get_object('label_passwordheader')
		self.entry_password1 = builder.get_object('entry_password1')
		self.entry_password2 = builder.get_object('entry_password2')
		self.checkbutton_visible_password = builder.get_object('checkbutton_visible_password')

		# Contact tab
		self.entry_officeinfo = builder.get_object('entry_officeinfo')
		self.entry_officeext = builder.get_object('entry_officeext')
		self.entry_homephone = builder.get_object('entry_homephone')

		# Groups tab
		self.combobox_maingroup = builder.get_object('combobox_maingroup')
		self.groupliststore = builder.get_object('groupliststore')
		self.user_grouplist = builder.get_object('user_grouplist')
		self.user_groupliststore = builder.get_object('user_groupliststore')
		self.column_user_membership_checked = builder.get_object('column_user_membership_checked')
		self.column_user_membership_group = builder.get_object('column_user_membership_group')
		self.column_user_membership_gid = builder.get_object('column_user_membership_gid')
		self.column_user_membership_checked.set_title(_('Member'))
		self.column_user_membership_group.set_title(_('Group'))
		self.column_user_membership_gid.set_title('GID')

		# Advanced tab
		self.entry_homedir = builder.get_object('entry_homedir')
		self.comboboxentry_shell = builder.get_object('comboboxentry_shell')
		self.spinbutton_uid = builder.get_object('spinbutton_uid')
		self.checkbutton_user_expiration = builder.get_object('checkbutton_user_expiration')
		self.calendar_user_expiration = builder.get_object('calendar_user_expiration')

		builder.connect_signals(self)

if __name__ == "__main__":
	app = GTKUserSetup()
	app.window.show()
	gtk.main()
