#!/usr/bin/env python
# vim:et:sta:sts=4:sw=4:ts=8:tw=79:

from __future__ import print_function
import gtk
import os
import sys
import subprocess
import threading
import platform
import re
import urllib2
from simpleconfig import SimpleConfig

# Internationalization
import locale
import gettext
locale.setlocale(locale.LC_ALL, '')
locale.bindtextdomain("gtkreposetup", "/usr/share/locale")
gettext.bindtextdomain("gtkreposetup", "/usr/share/locale")
gettext.textdomain("gtkreposetup")
_ = gettext.gettext


salixtoolsdir = '/usr/share/salixtools/'

canceltask = False

# initializing the gtk's thread engine
gtk.gdk.threads_init()

def threaded(f):
    def wrapper(*args):
        t = threading.Thread(target=f, args=args)
        t.start()
    return wrapper

class BreakConnection(Exception):
    '''
    An exception class to help break connections when hitting the cancel
    button.
    '''
    pass

def error_out(error_msg):
    print('ERROR: {}'.format(error_msg), file=sys.stderr)
    sys.exit(1)

def get_arch():
    '''
    Determine the CPU architecture. Should be:
    - 'arm' for any arm* system
    - 'i486' for 32bit systems
    - 'x86_64' for 64bit systems
    '''
    m = platform.machine()
    if re.match('i.86$', m):
        return 'i486'
    elif re.match('arm', m):
        return 'arm'
    else:
        return m

def get_salix_version():
    '''
    Read the Salix version.
    '''
    try:
        with open('/usr/share/salixtools/salix-version', 'r') as f:
            version = f.readline().strip()
    except IOError:
        error_out('Could not read file: /usr/share/salixtools/salix-version')
    return version

def get_current_repo():
    '''
    Return the currently selected repository. Just runs the command line
    reposetup tool with the -p option to get it.
    '''
    p = subprocess.Popen(['reposetup', '-p'], stdout=subprocess.PIPE)
    if p.wait() == 0:
        return p.communicate()[0].strip()
    # error code 11 is thrown by reposetup when the salix-version file is not
    # found
    elif p.wait() == 11:
        error_out('Could not read file: /usr/share/salixtools/salix-version')
    else:
        return None

def get_repo_list_from_file():
    '''
    Reads the list of mirrors from the file they are stored in and returns it
    as a list.
    '''
    repolist = []
    try:
        with open('/usr/share/salixtools/reposetup/repomirrors', 'r') as f:
            while True:
                line = f.readline().rstrip()
                if len(line) == 0:
                    break
                url = line.partition(' ')[0]
                country = line.partition(' ')[2]
                repolist.append([url, country])
    except IOError:
        error_out('Could not read file: /usr/share/salixtools/reposetup/repomirrors')
    try:
        with open('/etc/salixtools/repos-custom', 'r') as f:
            while True:
                line = f.readline().rstrip()
                if len(line) == 0:
                    break
                if line.startswith('file:///') or line.startswith('http://') \
                        or line.startswith('ftp://'):
                    url = line
                    country = '..'
                    repolist.append([url, country])
    except IOError:
        # not a big deal if the repos-custom file is not there
        pass
    return repolist

def get_slaptget_settings():
    exclude_default = '^aaa_elflibs,^aaa_base,^devs,^glibc.*,^kernel-.*,^udev,' \
                      '^rootuser-settings,^zzz-settings.*'
    try:
        c = SimpleConfig('/etc/slapt-get/slapt-getrc')
    except IOError:
        print('WARNING: Could not read file: /etc/slapt-get/slapt-getrc')
        working_dir = '/var/slapt-get'
        exclude = exclude_default
        if arch == 'x86_64':
            exclude = exclude + ',-i?86-'
        else:
            exclude = exclude + ',x86_64'
        custom_repos = []
    else:
        try:
            working_dir = c.get('WORKINGDIR')
        except ValueError:
            working_dir = '/var/slapt-get'
        try:
            exclude = c.get('EXCLUDE')
        except ValueError:
            exclude = exclude_default
            arch = get_arch()
            if arch != 'arm':
                if arch == 'x86_64':
                    exclude = exclude + ',-i?86-'
                else:
                    exclude = exclude + ',x86_64'
        try:
            sources = c.get_all('SOURCE')
            custom_repos = []
            for s in sources:
                if s.endswith(':CUSTOM'):
                    custom_repos.append(s)
        except ValueError:
            custom_repos = []
    return working_dir, exclude, custom_repos

def get_slaptsrc_settings():
    try:
        c = SimpleConfig('/etc/slapt-get/slapt-srcrc')
    except IOError:
        print('WARNING: Could not read file: /etc/slapt-get/slapt-srcrc')
        build_dir = '/usr/src/slapt-src'
        pkg_ext = 'txz'
    else:
        try:
            build_dir = c.get('BUILDDIR')
        except ValueError:
            build_dir = '/usr/src/slapt-src'
        try:
            pkg_ext = c.get('PKGEXT')
        except ValueError:
            pkg_ext = 'txz'
    return build_dir, pkg_ext

def write_conf(repo):
    '''
    Write configuration files.
    '''
    slaptget_working_dir, slaptget_exclude, custom = get_slaptget_settings()
    slaptsrc_build_dir, slaptsrc_pkg_ext = get_slaptsrc_settings()
    arch = get_arch()
    if arch == 'arm':
        slackdir = 'slackwarearm'
    else:
        slackdir = 'slackware'
    version = get_salix_version()
    #
    # slapt-getrc
    #
    try:
        f = open('/etc/slapt-get/slapt-getrc', 'w')
    except IOError:
        error_out("Could not write to file: /etc/slapt-get/slapt-getrc")
    else:
        f.write('# Working directory for local storage/cache.\n')
        f.write('WORKINGDIR={}\n\n'.format(slaptget_working_dir))
        f.write('# Exclude package names and expressions.\n')
        f.write('# To exclude pre and beta packages, add this to the exclude:\n')
        f.write('#   [0-9\_\.\-]{1}pre[0-9\-\.\-]{1}\n')
        f.write('EXCLUDE={}\n\n'.format(slaptget_exclude))
        f.write('# The Slackware repositories, including dependency information\n')
        f.write('SOURCE={r}/{a}/{s}-{v}/:OFFICIAL\n'.format(
            r=repo, a=arch, s=slackdir, v=version))
        f.write('SOURCE={r}/{a}/{s}-{v}/extra/:OFFICIAL\n\n'.format(
            r=repo, a=arch, s=slackdir, v=version))
        f.write('# The Salix repository\n')
        f.write('SOURCE={r}/{a}/{v}/:PREFERRED\n\n'.format(
            r=repo, a=arch, v=version))
        f.write('# Local repositories\n')
        f.write('# SOURCE=file:///var/www/packages/:CUSTOM\n')
        for repo in custom:
            f.write('SOURCE={r}\n'.format(repo))
        f.close()
    #
    # slapt-srcrc
    #
    #
    try:
        f = open('/etc/slapt-get/slapt-srcrc', 'w')
    except IOError:
        error_out("Could not write to file: /etc/slapt-get/slapt-srcrc")
    else:
        f.write('BUILDDIR={}\n'.format(slaptsrc_build_dir))
        f.write('PKGEXT={}\n'.format(slaptsrc_pkg_ext))
        f.write('SOURCE={r}/slkbuild/{v}/\n'.format(
            r=repo, v=version))
        f.write('SOURCE={r}/sbo/{v}/\n'.format(
            r=repo, v=version))
        f.close()

def get_mirrors(repo):
    '''
    Retrieves the MIRRORS file from repo.
    '''
    try:
        f = urllib2.urlopen('{}/MIRRORS'.format(repo))
        mirrors = f.read().splitlines()
    except urllib2.HTTPError:
        return None
    except urllib2.URLError:
        return None
    except BreakConnection :
        return None
    return mirrors

def write_mirrors(mirror_list):
    try:
        f = open('/usr/share/salixtools/reposetup/repomirrors', 'w')
    except IOError:
        print("WARNING: Cannot write to file: /usr/share/salixtools/reposetup/repomirrors")
    else:
        for line in mirror_list:
            f.write('{}\n'.format(line))
        f.close()

def update_mirror_list_from_repo(repo):
    '''
    Updates the mirror list from the specified repo.
    '''
    mirrors = get_mirrors(repo)
    if mirrors:
        write_mirrors(mirrors)
        return True
    else:
        return False

class GTKRepoSetup:

    #
    # Main Window
    #
    def on_button_about_clicked(self, widget, data=None):
        self.aboutdialog.show()

    def on_aboutdialog_response(self, widget, data=None):
        self.aboutdialog.hide()

    def on_aboutdialog_delete_event(self, widget, event):
        self.aboutdialog.hide()
        return True

    def on_button_ok_clicked(self, widget, data=None):
        selectedrepo = self.repolist.get_selection()
        self.liststore_repo, iter = selectedrepo.get_selected()
        new_repo = self.liststore_repo.get_value(iter, 0)
        if self.current_repo != new_repo:
            # write new configuration files
            write_conf(new_repo)
        gtk.main_quit()

    def on_button_cancel_clicked(self, widget, data=None):
        gtk.main_quit()

    def on_gtkreposetup_delete_event(self, widget, event):
        gtk.main_quit()

    def gtk_main_quit(self, widget, data=None):
        gtk.main_quit()

    #
    # Update Mirror List Dialog
    #
    @threaded
    def update_mirror_list(self):
        '''
        Tries to update the mirror list from the currently selected repo
        online. If it fails, it reads the local repomirrors file and tries
        to update the mirror list from each one of the repos listed in there.
        '''
        global canceltask
        canceltask = False
        gtk.gdk.threads_enter()
        self.dialog_update_list.show()
        gtk.gdk.threads_leave()
        repos = [[self.current_repo, None]] + get_repo_list_from_file()
        for repo in repos:
            gtk.gdk.threads_enter()
            self.progressbar_update_list.pulse()
            gtk.gdk.threads_leave()
            if not canceltask:
                url = repo[0]
                ret = update_mirror_list_from_repo(url)
                if ret:
                    break
        gtk.gdk.threads_enter()
        self.dialog_update_list.hide()
        gtk.gdk.threads_leave()
        cursorpos = 0
        selectedpos = 0
        for i in get_repo_list_from_file():
            self.liststore_repo.append(i)
            if self.current_repo == i[0]:
                selectedpos = cursorpos
            cursorpos += 1
        gtk.gdk.threads_enter()
        self.repolist.set_cursor(selectedpos)
        gtk.gdk.threads_leave()
        if selectedpos > 5:
            if selectedpos > cursorpos - 5:
                scrollto = cursorpos - 1
            else:
                scrollto = selectedpos + 1
        gtk.gdk.threads_enter()
        self.repolist.scroll_to_cell(scrollto)
        gtk.gdk.threads_leave()

    def on_button_update_list_cancel_clicked(self, widget):
        self.dialog_update_list.hide()
        global canceltask
        canceltask = True
        raise BreakConnection

    def __init__(self):
        builder = gtk.Builder()
        builder.set_translation_domain("gtkreposetup")
        if os.path.exists('gtkreposetup.ui'):
            builder.add_from_file('gtkreposetup.ui')
        elif os.path.exists('/usr/share/salixtools/gtkreposetup/gtkreposetup.ui'):
            builder.add_from_file(
                '/usr/share/salixtools/gtkreposetup/gtkreposetup.ui')
        self.window = builder.get_object('gtkreposetup')
        self.aboutdialog = builder.get_object('aboutdialog')

        self.repolist = builder.get_object('repolist')
        self.liststore_repo = builder.get_object('liststore_repo')
        self.liststore_repo.clear()

        # update dialog
        self.dialog_update_list = builder.get_object('dialog_update_list')
        self.progressbar_update_list = builder.get_object('progressbar_update_list')

        # populate the list of mirrors
        self.current_repo = get_current_repo()
        self.update_mirror_list()

        builder.connect_signals(self)

if __name__ == "__main__":
    app = GTKRepoSetup()
    app.window.show()
    gtk.main()
